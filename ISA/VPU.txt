B = Byte
H = half
S = single
D = double

64 registres 64 bits

[0-6] opcode
[7-9] ext opcode
[10-13] size
[14-31] register
-------------------------
VPU
j:0 = half
j:1 = single
---------Vector--------


opcode : 0x03 (+0x180)
ii00 000l ljss ssvv
vvvv vvvv vvvv vvvv

padd,psub,pmul,pmuladd
padd.h vp0,vp0y,vp0z   //x = y*z

opcode : 0x13 (+0x180)
ii00 100l l0ss 00vv
vvvv vvvv vvvv vvvv

padd,psub,pmul,pmuladd  //xyzw = xyzw + xyzw
padd.xyzw vp0,vp0,vp1

opcode : 0x23 (+0x180)
ii00 010l l0ss ssvv
vvvv vvvv vvvv vvvv

paddvh,pmulvh,psubvh,pmuladdvh //xyzw = xyzw + x
paddv.xyz vp0,vp0,vp0w

opcode : 0x33 (+0x180)
ii00 110l l0ss ssvv
vvvv vvvv vvvv vvvv

pmulvah //ACC = xyzw * x
pmuladdvah //ACC += xyzw * y
pmuladdvaoh //xyzw = ACC + xyzw * w
pipr, //x = x1*x2 + y1*y2 + z1*z2 + w1*w2

pmulvah.xy vp0,vp0x
pmuladdvaoh.xyzw vp1,vp0,vp0z
pipr.xyz vp0,vp0,vp1


---------Copy--------

opcode : 0x07
ii10 0000 00ss ss00
0000 vvvv vvvv vvvv

pmove vp0x,vp1y

opcode : 0x17
ii10 1000 00ss 0000
0000 vvvv vvvv vvvv

vpmove.x vp0,vp1

opcode : 0x27/0x37
ii10 l100 00ss 0000
0000 rrrr rrvv vvvv

pmovero.x r0,vp4
pmoveri.x vp0,r4

;imm
opcode : 0x47
;posit16
ii10 0010 ssmm mmmm
mmmm mmmm mmvv vvvv

pmovei.h vp0x,imm

opcode : 0x57
;posit32 copy upper bit
ii10 1010 mmmm mmmm
mmmm mmmm mmvv vvvv

pmovei.s vp0,imm

opcode : 0x67
;posit 16 bits
ii10 0110 ssmm mmmm
mmmm mmmm mmvv vvvv

vpmovei.xy vp0,imm


---------Convert--------

opcode : 0x87/0x187
;convert posit half/single
ii10 0001 l0ss 0000
0000 vvvv vvvv vvvv

pconvertsh vp0,vp0x
pconverths vp0x,vp0

opcode : 0x97/0x197
;Convert posit half/int
ii10 1001 l0ss 0000
0000 rrrr rrvv vvvv

pconverthi.w vp0x,r0
pconvertih.b r0,vp0x

opcode : 0xA7/0x1A7
;Convert posit single/int
ii10 0101 l000 0000
0000 rrrr rrvv vvvv

pconvertsi.w vp0,r0
pconvertis.b r0,vp0



-------------------------
VDIV
opcode : 0x0B-0x3B
ii01 jl00 000p pppp
pppp pppp pppp pppp

pdiv.h ph0,ph0,ph1
psqrt.h ph0,ph0

pdiv.s ps0,ps0,ps1
psqrt.s ps0,ps0


