; ModuleID = 'main.c'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.LLVM2 = type { [7 x i8], [10 x i32], [9 x i16] }
%struct.LLVM = type { i32, i32, i32, [4 x i32], [4 x i32], float, [50 x i8] }

@global1 = dso_local local_unnamed_addr global i32 4, align 4
@global3 = dso_local local_unnamed_addr constant i32 5, align 4
@virgule = dso_local local_unnamed_addr global float 1.000000e+00, align 4
@virgule2 = dso_local local_unnamed_addr global double 0x3FB99999A0000000, align 8
@DATA_ROM = dso_local local_unnamed_addr global [6 x i8] c"\00\0A\0F\14\19\1E", align 1
@DATA_ROM2 = internal global [6 x i8] c"\00\0A\0F\14\19\1E", align 1
@testf.var = internal unnamed_addr global i32 1, align 4
@test5 = common dso_local local_unnamed_addr global %struct.LLVM2 zeroinitializer, align 4
@global2 = external dso_local local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"hello2\00", align 1
@pointeur = common dso_local local_unnamed_addr global i8* null, align 8
@global4 = common dso_local local_unnamed_addr global i32 0, align 4
@tableau = common dso_local local_unnamed_addr global [100 x i16] zeroinitializer, align 16
@test_st = common dso_local local_unnamed_addr global [2 x %struct.LLVM] zeroinitializer, align 16

; Function Attrs: nounwind uwtable
define dso_local void @LKS_test(%struct.LLVM* nocapture readnone) local_unnamed_addr #0 {
  tail call void @printfd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @DATA_ROM2, i64 0, i64 0)) #5
  ret void
}

declare dso_local void @printfd(i8*) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define dso_local void @testf(%struct.LLVM2* noalias nocapture sret) local_unnamed_addr #0 {
  %2 = load i32, i32* @testf.var, align 4, !tbaa !2
  %3 = add nsw i32 %2, 1
  store i32 %3, i32* @testf.var, align 4, !tbaa !2
  %4 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @DATA_ROM2, i64 0, i64 1), align 1, !tbaa !6
  %5 = zext i8 %4 to i32
  store i32 %5, i32* getelementptr inbounds (%struct.LLVM2, %struct.LLVM2* @test5, i64 0, i32 1, i64 0), align 4, !tbaa !2
  %6 = getelementptr inbounds %struct.LLVM2, %struct.LLVM2* %0, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 getelementptr inbounds (%struct.LLVM2, %struct.LLVM2* @test5, i64 0, i32 0, i64 0), i64 68, i1 false), !tbaa.struct !7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca %struct.LLVM, align 4
  %2 = bitcast %struct.LLVM* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %2) #5
  %3 = getelementptr inbounds %struct.LLVM, %struct.LLVM* %1, i64 0, i32 2
  store i32 5, i32* %3, align 4, !tbaa !8
  %4 = getelementptr inbounds %struct.LLVM, %struct.LLVM* %1, i64 0, i32 5
  store float 5.000000e-01, float* %4, align 4, !tbaa !11
  store i32 45, i32* @global2, align 4, !tbaa !2
  tail call void asm sideeffect "lda #5\0A", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !12
  store i32 136, i32* @global1, align 4, !tbaa !2
  tail call void @LKS_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #5
  tail call void @LKS_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0)) #5
  tail call void @WaitVBlank() #5
  call void @LKS_test3(%struct.LLVM* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %2) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local void @LKS_printf(i8*) local_unnamed_addr #1

declare dso_local void @WaitVBlank() local_unnamed_addr #1

declare dso_local void @LKS_test3(%struct.LLVM*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @func() local_unnamed_addr #0 {
  tail call void @WaitVBlank() #5
  tail call void @WaitVBlank() #5
  tail call void @WaitVBlank() #5
  tail call void @WaitVBlank() #5
  tail call void @WaitVBlank() #5
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local signext i8 @func2(i32, i32) local_unnamed_addr #3 {
  %3 = add nsw i32 %1, %0
  %4 = trunc i32 %3 to i8
  ret i8 %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @func3(i32, i32) local_unnamed_addr #3 {
  %3 = mul nsw i32 %1, %0
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @func4(i32, i32) local_unnamed_addr #3 {
  %3 = icmp eq i32 %0, %1
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @func5(i32* nocapture, i32* nocapture) local_unnamed_addr #4 {
  store i32 11, i32* %1, align 4, !tbaa !2
  store i32 56, i32* %0, align 4, !tbaa !2
  %3 = load i32, i32* %1, align 4, !tbaa !2
  ret i32 %3
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.1 (Fedora 9.0.1-2.fc31)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{i64 0, i64 7, !6, i64 8, i64 40, !6, i64 48, i64 18, !6}
!8 = !{!9, !3, i64 8}
!9 = !{!"", !3, i64 0, !3, i64 4, !3, i64 8, !4, i64 12, !4, i64 28, !10, i64 44, !4, i64 48}
!10 = !{!"float", !4, i64 0}
!11 = !{!9, !10, i64 44}
!12 = !{i32 1180}
