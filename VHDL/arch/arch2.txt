ALU1
IN:
Opcode 4 bits
fct 2 bits

regsrc1 64 bits
regsrc2 64 bits


OUT:
regw 6 bits 
FR 8 bits

variable
ACCU 64 bits

fait un if/else pour executer:
ADD/SUB/OR/XOR/AND/MULU/MULS/DIVS/DIVU/REMS/REMU/MOVE/CMP

Si ACCUR = 1
Alors on lis la variable locale à la place ACCU

Si ACCUW = 1
Alors on écrit la variable locale à la place ACCU

le CMP peut lire l'ACCU et écrit uniquement sur FR

fct indique si on lis/écrit en 8/16/32/64 (on est en little endian , donc on met des 0 dans la partie haute).
(64 bits ne fait rien du coup)

pour MUL/DIV/REM , celà envoie un signal spécifique
Tout les instructions (sauf mul/div/rem) envoie un signal sur une unité d'attente ( l'execution dure 2 cycles ).

ALU2 pareil sauf qu'il n'a pas de mul/div/rem et pas de CMP
ALU3 pareil que ALU 2 mais uniquement en 32 bits
ALU4 pareil , mais n'a pas le move (il se fait via l'instruction or R1,R0,R0 , mais n'a pas d'immédiate dans son instruction set)



VFPU:
meme principe , mais flemme de penser dans les détails pour le moment ah ah
